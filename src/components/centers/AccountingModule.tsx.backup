import React, { useState, useEffect } from 'react';
import { TrendingUp, Calculator, Plus, Settings, Trash2, Download, Calendar, ArrowLeft, TrendingDown, Save } from 'lucide-react';
import { accountingService, type FinancialData as SupabaseFinancialData, type CuotaType, type MonthlyCuota, type GastoExtra as SupabaseGastoExtra } from '../../services/accountingService';

interface AccountingModuleProps {
  centerName: string;
  centerId: string;
  onBack: () => void;
}

interface TipoCuota {
  nombre: string;
  precio: number; // Precio total que paga el usuario (con IVA incluido)
}

interface MovimientoCuota {
  fecha: string;
  descripcion?: string;
}

interface CuotaItem {
  id: string;
  cuota_type_id: string;
  tipo: string;
  cantidad: number;
  importe: number;
  iva: number;
  precio_total?: number;
}

interface GastoExtra {
  id: string;
  concepto: string;
  importe: number;
  categoria: string;
}

interface FinancialData {
  cuotas: CuotaItem[];
  nutricion: number;
  fisioterapia: number;
  entrenamiento_personal: number;
  entrenamientos_grupales: number;
  otros: number;
  alquiler: number;
  suministros: number;
  nominas: number;
  seguridad_social: number;
  marketing: number;
  mantenimiento: number;
  royalty: number;
  gastos_extras: GastoExtra[];
  mes: number;
  año: number;
}

// Tipos de cuota por defecto con precios - se pueden personalizar por centro
const DEFAULT_TIPOS_CUOTA: TipoCuota[] = [
  { nombre: 'Cuota Mensual Básica', precio: 39.90 },
  { nombre: 'Cuota Mensual Premium', precio: 59.90 },
  { nombre: 'Cuota Anual', precio: 399.00 },
  { nombre: 'Cuota Estudiante', precio: 29.90 },
  { nombre: 'Cuota Familiar', precio: 79.90 },
  { nombre: 'Cuota Corporativa', precio: 49.90 },
  { nombre: 'Cuota Día', precio: 12.90 },
  { nombre: 'Cuota Fin de Semana', precio: 19.90 }
];

const CATEGORIAS_GASTOS = [
  'Operativo',
  'Mantenimiento',
  'Marketing',
  'Personal',
  'Administrativo',
  'Tecnología',
  'Seguridad',
  'Limpieza'
];

const MESES = [
  'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
  'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
];

const AccountingModule: React.FC<AccountingModuleProps> = ({ centerName, centerId, onBack }) => {
  const [activeTab, setActiveTab] = useState<'entrada' | 'reportes'>('entrada');
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState<SupabaseFinancialData>({
    center_id: centerId,
    center_name: centerName,
    mes: new Date().getMonth() + 1,
    año: new Date().getFullYear(),
    cuotas: [],
    nutricion: 0,
    fisioterapia: 0,
    entrenamiento_personal: 0,
    entrenamientos_grupales: 0,
    otros: 0,
    alquiler: 0,
    suministros: 0,
    nominas: 0,
    seguridad_social: 0,
    marketing: 0,
    mantenimiento: 0,
    royalty: 0,
    gastos_extras: []
  });

  // Estado para tipos de cuotas desde Supabase
  const [tiposCuota, setTiposCuota] = useState<CuotaType[]>([]);
  const [showCuotaConfig, setShowCuotaConfig] = useState(false);
  const [newTipoCuota, setNewTipoCuota] = useState('');
  const [newPrecioCuota, setNewPrecioCuota] = useState<number>(0);

  // Cargar datos desde Supabase
  useEffect(() => {
    loadCuotaTypes();
  }, [centerId]);

  useEffect(() => {
    if (tiposCuota.length > 0) {
      loadFinancialData();
    }
  }, [centerId, data.mes, data.año, tiposCuota.length]);

  const loadCuotaTypes = async () => {
    try {
      console.log('Cargando tipos de cuotas para centro:', centerId);
      const types = await accountingService.getCuotaTypes(centerId);
      console.log('Tipos de cuotas cargados:', types);
      setTiposCuota(types);
    } catch (error) {
      console.error('Error cargando tipos de cuotas:', error);
      // Usar tipos por defecto si hay error
      const defaultTypes = DEFAULT_TIPOS_CUOTA.map((tipo, index) => ({
        id: `default-${index}`,
        center_id: centerId,
        nombre: tipo.nombre,
        precio: tipo.precio,
        activo: true
      }));
      setTiposCuota(defaultTypes);
    }
  };

  const loadFinancialData = async () => {
    setLoading(true);
    const financialData = await accountingService.getFinancialData(centerId, centerName, data.mes, data.año);
    
    // Convertir datos de Supabase al formato local
    const localData: SupabaseFinancialData = {
      center_id: centerId,
      center_name: centerName,
      cuotas: financialData.cuotas.map(cuota => ({
        id: cuota.id || Math.random().toString(36).substr(2, 9),
        cuota_type_id: cuota.cuota_type_id,
        cantidad: cuota.cantidad,
        importe: cuota.importe,
        iva: cuota.iva,
        tipo: cuota.tipo || '',
        precio_total: cuota.precio_total
      })),
      nutricion: financialData.nutricion,
      fisioterapia: financialData.fisioterapia,
      entrenamiento_personal: financialData.entrenamiento_personal,
      entrenamientos_grupales: financialData.entrenamientos_grupales,
      otros: financialData.otros,
      alquiler: financialData.alquiler,
      suministros: financialData.suministros,
      nominas: financialData.nominas,
      seguridad_social: financialData.seguridad_social,
      marketing: financialData.marketing,
      mantenimiento: financialData.mantenimiento,
      royalty: financialData.royalty || 0,
      gastos_extras: financialData.gastos_extras,
      mes: financialData.mes,
      año: financialData.año
    };
    
    setData(localData);
    setLoading(false);
  };

  // Cálculos automáticos
  const totalIngresosNetosCuotas = data.cuotas.reduce((sum, cuota) => sum + (cuota.cantidad * cuota.importe), 0);
  const totalIvaCuotas = data.cuotas.reduce((sum, cuota) => sum + (cuota.cantidad * cuota.iva), 0);
  const totalIngresosNetos = totalIngresosNetosCuotas + data.nutricion + data.fisioterapia + data.entrenamiento_personal + data.entrenamientos_grupales + data.otros;
  const totalIngresos = totalIngresosNetos + totalIvaCuotas;
  const totalGastosExtras = data.gastos_extras.reduce((sum, gasto) => sum + gasto.importe, 0);
  const totalGastos = data.alquiler + data.suministros + data.nominas + data.seguridad_social + 
    data.marketing + data.mantenimiento + data.royalty + totalGastosExtras;
  
  const beneficioNeto = totalIngresos - totalGastos;
  const margen = totalIngresos > 0 ? (beneficioNeto / totalIngresos) * 100 : 0;

  const handleChange = (field: keyof SupabaseFinancialData, value: string) => {
    if (field === 'cuotas' || field === 'gastos_extras') return; // Estos se manejan por separado
    
    // Manejar campos especiales que son números enteros
    if (field === 'mes' || field === 'año') {
      setData(prev => ({ ...prev, [field]: parseInt(value) || 0 }));
    } else {
      // Campos monetarios (números decimales)
      setData(prev => ({ ...prev, [field]: parseFloat(value) || 0 }));
    }
  };

  // Función para calcular IVA desde precio base (sin IVA)
  const calcularPrecios = (precioSinIva: number) => {
    // El precio introducido es la BASE (sin IVA)
    // IVA = base × 0.21
    const iva = precioSinIva * 0.21;
    // Precio total = base + IVA
    const precioTotal = precioSinIva + iva;
    return { precioSinIva: precioSinIva, iva: iva, precioTotal: precioTotal };
  };

  // Funciones para gestionar tipos de cuotas con Supabase
  const addTipoCuota = async () => {
    console.log('Intentando añadir cuota:', { nombre: newTipoCuota.trim(), precio: newPrecioCuota });
    
    if (newTipoCuota.trim() && newPrecioCuota > 0) {
      // Verificar duplicados localmente
      const duplicado = tiposCuota.some(t => t.nombre.toLowerCase() === newTipoCuota.trim().toLowerCase());
      if (duplicado) {
        alert('Ya existe una cuota con ese nombre');
        return;
      }
      
      const newType = await accountingService.createCuotaType(centerId, newTipoCuota.trim(), newPrecioCuota);
      if (newType) {
        console.log('Cuota creada exitosamente:', newType);
        await loadCuotaTypes(); // Recargar tipos
        setNewTipoCuota('');
        setNewPrecioCuota(0);
      } else {
        console.error('Error: No se pudo crear la cuota');
      }
    } else {
      console.log('Validación fallida:', { 
        nombreVacio: !newTipoCuota.trim(), 
        precioInvalido: newPrecioCuota <= 0 
      });
    }
  };

  const removeTipoCuota = async (id: string) => {
    const tipo = tiposCuota.find(t => t.id === id);
    const confirmMessage = `¿Estás seguro de que quieres eliminar el tipo de cuota "${tipo?.nombre}" (€${tipo?.precio})?\n\nSi hay cuotas usando este tipo, podrían verse afectadas.\n\nEsta acción no se puede deshacer.`;
    
    if (window.confirm(confirmMessage)) {
      const success = await accountingService.deleteCuotaType(id);
      if (success) {
        await loadCuotaTypes(); // Recargar tipos
      }
    }
  };

  // Función para guardar todos los datos financieros
  const saveFinancialData = async () => {
    setLoading(true);
    
    // Convertir datos locales al formato de Supabase
    const supabaseData: SupabaseFinancialData = {
      center_id: centerId,
      center_name: centerName,
      mes: data.mes,
      año: data.año,
      nutricion: data.nutricion,
      fisioterapia: data.fisioterapia,
      entrenamiento_personal: data.entrenamiento_personal,
      entrenamientos_grupales: data.entrenamientos_grupales,
      otros: data.otros,
      alquiler: data.alquiler,
      suministros: data.suministros,
      nominas: data.nominas,
      seguridad_social: data.seguridad_social,
      marketing: data.marketing,
      mantenimiento: data.mantenimiento,
      royalty: data.royalty,
      cuotas: data.cuotas.map(cuota => {
        const tipoCuota = tiposCuota.find(t => t.nombre === cuota.tipo);
        return {
          cuota_type_id: tipoCuota?.id || '',
          cantidad: cuota.cantidad,
          importe: cuota.importe,
          iva: cuota.iva
        };
      }),
      gastos_extras: data.gastos_extras
    };

    const success = await accountingService.saveFinancialData(supabaseData);
    if (success) {
      console.log('Datos guardados correctamente en Supabase');
    } else {
      console.error('Error al guardar datos en Supabase');
    }
    
    setLoading(false);
  };

  // Funciones para manejar cuotas
  const addCuota = () => {
    if (tiposCuota.length === 0) {
      alert('Primero debes configurar tipos de cuotas usando el botón "⚙️ Config"');
      return;
    }
    
    const primerTipo = tiposCuota[0];
    const { precioSinIva, iva } = calcularPrecios(primerTipo.precio);
    
    const newCuota: CuotaItem = {
      id: Date.now().toString(),
      cuota_type_id: primerTipo.id,
      tipo: primerTipo.nombre,
      cantidad: 0,
      importe: precioSinIva,
      iva: iva,
      precio_total: primerTipo.precio
    };
    setData(prev => ({ ...prev, cuotas: [...prev.cuotas, newCuota] }));
  };

  const updateCuota = (id: string, field: keyof CuotaItem, value: string | number) => {
    setData(prev => ({
      ...prev,
      cuotas: prev.cuotas.map(cuota => {
        if (cuota.id === id) {
          if (field === 'tipo' && typeof value === 'string') {
            // Cuando cambia el tipo de cuota, recalcular precio e IVA automáticamente
            const tipoSeleccionado = tiposCuota.find(t => t.nombre === value);
            if (tipoSeleccionado) {
              const { precioSinIva, iva } = calcularPrecios(tipoSeleccionado.precio);
              return { ...cuota, tipo: value, importe: precioSinIva, iva: iva };
            }
            return { ...cuota, tipo: value };
          } else if (field === 'cantidad') {
            // Solo actualizar la cantidad, mantener precios calculados
            return { ...cuota, cantidad: typeof value === 'string' ? parseFloat(value) || 0 : value };
          }
          // Para otros campos, mantener comportamiento original
          return { ...cuota, [field]: typeof value === 'string' ? parseFloat(value) || 0 : value };
        }
        return cuota;
      })
    }));
  };

  const removeCuota = (id: string) => {
    const cuota = data.cuotas.find(c => c.id === id);
    const confirmMessage = `¿Estás seguro de que quieres eliminar la cuota "${cuota?.tipo}" con ${cuota?.cantidad} clientes?\n\nEsta acción no se puede deshacer.`;
    
    if (window.confirm(confirmMessage)) {
      setData(prev => ({ ...prev, cuotas: prev.cuotas.filter(cuota => cuota.id !== id) }));
    }
  };

  const updateCuotaCantidad = (cuotaId: string, nuevaCantidad: number) => {
    setData(prev => ({
      ...prev,
      cuotas: prev.cuotas.map(cuota => 
        cuota.id === cuotaId 
          ? { ...cuota, cantidad: nuevaCantidad }
          : cuota
      )
    }));
  };

  const updateCuotaTipo = (cuotaId: string, nuevoTipo: string) => {
    const tipoCuota = tiposCuota.find(t => t.nombre === nuevoTipo);
    if (!tipoCuota) return;
    
    const { precioSinIva, iva } = calcularPrecios(tipoCuota.precio);
    
    setData(prev => ({
      ...prev,
      cuotas: prev.cuotas.map(cuota => 
        cuota.id === cuotaId 
          ? { ...cuota, tipo: nuevoTipo, importe: precioSinIva, iva: iva }
          : cuota
      )
    }));
  };

  // Funciones para manejar gastos extras
  const addGastoExtra = () => {
    const newGasto: GastoExtra = {
      id: Date.now().toString(),
      concepto: '',
      importe: 0,
      categoria: CATEGORIAS_GASTOS[0]
    };
    setData(prev => ({ ...prev, gastos_extras: [...prev.gastos_extras, newGasto] }));
  };

  const updateGastoExtra = (id: string, field: keyof GastoExtra, value: string | number) => {
    setData(prev => ({
      ...prev,
      gastos_extras: prev.gastos_extras.map(gasto => 
        gasto.id === id ? { ...gasto, [field]: typeof value === 'string' ? (field === 'concepto' || field === 'categoria' ? value : parseFloat(value) || 0) : value } : gasto
      )
    }));
  };

  const removeGastoExtra = (id: string) => {
    const gasto = data.gastos_extras.find(g => g.id === id);
    const confirmMessage = `¿Estás seguro de que quieres eliminar el gasto "${gasto?.concepto}" de €${gasto?.importe}?\n\nEsta acción no se puede deshacer.`;
    
    if (window.confirm(confirmMessage)) {
      setData(prev => ({ ...prev, gastos_extras: prev.gastos_extras.filter(gasto => gasto.id !== id) }));
    }
  };

  // Cálculo automático de clientes basado en cuotas
  const totalClientes = data.cuotas.reduce((sum, cuota) => {
    // Consideramos que cada cuota representa un cliente
    // Las medias cuotas (0.5) también cuentan como clientes
    return sum + cuota.cantidad;
  }, 0);

  // Función para sincronizar con módulo de clientes
  const syncWithClientsModule = () => {
    const clientsData = {
      totalClientes,
      facturacionTotal: totalIngresos,
      mes: data.mes,
      año: data.año,
      desgloseCuotas: data.cuotas.map(cuota => ({
        tipo: cuota.tipo,
        cantidad: cuota.cantidad,
        importe: cuota.importe
      }))
    };
    
    console.log('Sincronizando datos con clientes:', clientsData);
    
    // Guardar en localStorage para que el módulo de clientes lo pueda leer
    localStorage.setItem(`clients_sync_${centerId}`, JSON.stringify(clientsData));
  };

  const handleSave = async () => {
    try {
      await saveFinancialData();
      
      // Sincronizar automáticamente con módulo de clientes
      syncWithClientsModule();
      
      // También sincronizar directamente con Supabase si está disponible
      try {
        const { clientsService } = await import('../../services/clientsService');
        await clientsService.syncFromAccounting(centerId, data.mes, data.año, totalClientes, totalIngresos);
        console.log('Sincronización automática con Supabase completada');
      } catch (error) {
        console.log('Sincronización con localStorage completada (Supabase no disponible)');
      }
      
      alert(`Datos guardados en Supabase correctamente. ${totalClientes} clientes sincronizados automáticamente con el módulo de clientes.`);
    } catch (error) {
      console.error('Error al guardar:', error);
      alert('Error al guardar los datos en Supabase');
    }
  };

  return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb' }}>
      <div style={{ backgroundColor: 'white', padding: '24px', borderBottom: '1px solid #e5e7eb', display: 'flex', alignItems: 'center', gap: '16px' }}>
        <button onClick={onBack} style={{ padding: '8px', backgroundColor: '#f3f4f6', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
          <ArrowLeft style={{ width: '20px', height: '20px' }} />
        </button>
        <div style={{ flex: 1 }}>
          <h1 style={{ fontSize: '28px', fontWeight: 'bold', margin: 0 }}>💰 Contabilidad - {centerName}</h1>
          <p style={{ color: '#6b7280', margin: '4px 0 0 0' }}>Gestión financiera mensual</p>
        </div>
        
        {/* Selector de Mes y Año Global */}
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <Calendar style={{ width: '20px', height: '20px', color: '#6b7280' }} />
          <select 
            value={data.mes} 
            onChange={(e) => handleChange('mes', e.target.value)}
            style={{ padding: '8px 12px', border: '1px solid #d1d5db', borderRadius: '8px', fontSize: '14px', minWidth: '120px' }}
          >
            {MESES.map((mes, index) => (
              <option key={index} value={index + 1}>{mes}</option>
            ))}
          </select>
          <select 
            value={data.año} 
            onChange={(e) => handleChange('año', e.target.value)}
            style={{ padding: '8px 12px', border: '1px solid #d1d5db', borderRadius: '8px', fontSize: '14px', minWidth: '100px' }}
          >
            {Array.from({ length: 10 }, (_, i) => {
              const year = new Date().getFullYear() - 5 + i;
              return (
                <option key={year} value={year}>{year}</option>
              );
            })}
          </select>
          <div style={{ fontSize: '12px', color: '#6b7280', fontStyle: 'italic' }}>
            📊 Histórico disponible para análisis de tendencias
          </div>
        </div>
      </div>

      <div style={{ padding: '32px' }}>
        {/* Tabs */}
        <div style={{ display: 'flex', gap: '8px', marginBottom: '32px' }}>
          <button onClick={() => setActiveTab('entrada')} style={{ padding: '12px 24px', backgroundColor: activeTab === 'entrada' ? '#059669' : '#f3f4f6', color: activeTab === 'entrada' ? 'white' : '#6b7280', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
            📝 Entrada de Datos
          </button>
          <button onClick={() => setActiveTab('reportes')} style={{ padding: '12px 24px', backgroundColor: activeTab === 'reportes' ? '#059669' : '#f3f4f6', color: activeTab === 'reportes' ? 'white' : '#6b7280', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
            📊 Reportes
          </button>
        </div>

        {activeTab === 'entrada' && (
          <>
            {/* Información del nuevo sistema incremental */}
            <div style={{ backgroundColor: '#ecfdf5', border: '1px solid #10b981', borderRadius: '8px', padding: '12px', marginBottom: '24px', display: 'flex', alignItems: 'center', gap: '12px' }}>
              <div style={{ fontSize: '20px' }}>🚀</div>
              <div>
                <p style={{ margin: 0, fontSize: '14px', fontWeight: '500', color: '#065f46' }}>
                  Sistema de Registro Incremental
                </p>
                <p style={{ margin: '2px 0 0 0', fontSize: '12px', color: '#047857' }}>
                  Día 5: Añade +200 clientes • Día 15: Añade +150 clientes • Total automático: 350 clientes • Historial completo de movimientos
                </p>
              </div>
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '24px' }}>
            {/* Ingresos */}
            <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', border: '2px solid #10b981' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '20px', color: '#10b981', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <TrendingUp style={{ width: '20px', height: '20px' }} />
                Ingresos
              </h3>
              
              <div style={{ display: 'grid', gap: '16px' }}>
                {/* Cuotas Dinámicas con Integración de Clientes */}
                <div>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: '500' }}>💰 Cuotas</label>
                    <div style={{ display: 'flex', gap: '6px' }}>
                      <button 
                        onClick={() => setShowCuotaConfig(true)} 
                        style={{ padding: '6px 12px', backgroundColor: '#6b7280', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer', fontSize: '12px', display: 'flex', alignItems: 'center', gap: '4px' }}
                        title="Configurar tipos de cuotas"
                      >
                        ⚙️ Config
                      </button>
                      <button 
                        onClick={addCuota} 
                        disabled={loading || tiposCuota.length === 0}
                        style={{ 
                          padding: '6px 12px', 
                          backgroundColor: (loading || tiposCuota.length === 0) ? '#9ca3af' : '#10b981', 
                          color: 'white', 
                          border: 'none', 
                          borderRadius: '6px', 
                          cursor: (loading || tiposCuota.length === 0) ? 'not-allowed' : 'pointer', 
                          fontSize: '12px', 
                          display: 'flex', 
                          alignItems: 'center', 
                          gap: '4px' 
                        }}
                      >
                        <Plus style={{ width: '14px', height: '14px' }} />
                        {loading ? 'Cargando...' : 'Añadir'}
                      </button>
                    </div>
                  </div>
                  
                  {/* Información de sincronización */}
                  <div style={{ backgroundColor: '#f0f9ff', border: '1px solid #0ea5e9', borderRadius: '6px', padding: '8px', marginBottom: '12px', fontSize: '12px', color: '#0c4a6e' }}>
                    👥 <strong>{totalClientes}</strong> clientes totales • Se sincronizará automáticamente con el módulo de clientes
                  </div>

                  {/* Encabezados de columnas - Diseño compacto */}
                  {data.cuotas.length > 0 && (
                    <div style={{ display: 'grid', gridTemplateColumns: '1.8fr 0.8fr 0.7fr 0.7fr auto', gap: '4px', marginBottom: '6px', fontSize: '10px', color: '#6b7280', fontWeight: '500' }}>
                      <div>Tipo de Cuota</div>
                      <div>Clientes</div>
                      <div>€ s/IVA</div>
                      <div>IVA</div>
                      <div></div>
                    </div>
                  )}
                  
                  {data.cuotas.map((cuota) => (
                    <div key={cuota.id} style={{ marginBottom: '12px', padding: '12px', backgroundColor: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                      {/* Header de la cuota */}
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 0.7fr 0.7fr auto', gap: '8px', marginBottom: '8px', alignItems: 'center' }}>
                        <select 
                          value={cuota.tipo} 
                          onChange={(e) => updateCuota(cuota.id || '', 'tipo', e.target.value)} 
                          style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', fontWeight: '500' }}
                        >
                          {tiposCuota.map((tipo) => <option key={tipo.nombre} value={tipo.nombre}>{tipo.nombre}</option>)}
                        </select>
                        <div style={{ padding: '8px', backgroundColor: '#e0f2fe', borderRadius: '6px', fontSize: '12px', textAlign: 'center', color: '#0c4a6e', fontWeight: '500' }}>
                          Total: {cuota.cantidad}
                        </div>
                        <div style={{ padding: '8px', backgroundColor: '#f0f9ff', borderRadius: '6px', fontSize: '12px', textAlign: 'center', color: '#1e40af', fontWeight: '500' }}>
                          €{(cuota.importe * cuota.cantidad + cuota.iva * cuota.cantidad).toFixed(2)}
                        </div>
                        <button 
                          onClick={() => removeCuota(cuota.id || '')} 
                          style={{ padding: '6px', backgroundColor: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                          title="Eliminar cuota"
                        >
                          <Trash2 style={{ width: '12px', height: '12px' }} />
                        </button>
                      </div>
                      
                      {/* Sistema de edición simple */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: '6px', alignItems: 'center' }}>
                        <input 
                          type="number" 
                          placeholder="Número de clientes" 
                          value={cuota.cantidad}
                          onChange={(e) => updateCuota(cuota.id || '', 'cantidad', e.target.value)}
                          style={{ padding: '6px', border: '1px solid #d1d5db', borderRadius: '4px', fontSize: '11px' }}
                          title="Actualizar cada viernes con nuevos clientes"
                        />
                                ...prev,
                                cuotas: prev.cuotas.map(c => 
                                  c.id === cuota.id 
                                    ? { 
                                        ...c, 
                                        cantidad: c.cantidad + nuevos,
                                        movimientos: [...(c.movimientos || []), nuevoMovimiento]
                                      }
                                    : c
                                )
                              }));
                              input.value = '';
                            }
                          }}
                          style={{ padding: '6px 10px', backgroundColor: '#10b981', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '11px' }}
                        >
                          + Añadir
                        </button>
                        <button 
                          onClick={() => {
                            // Registrar movimiento de reset
                            const nuevoMovimiento: MovimientoCuota = {
                              fecha: new Date().toISOString(),
                              cantidad: -cuota.cantidad,
                              descripcion: `Reset a 0 (desde ${cuota.cantidad})`
                            };
                            
                            setData(prev => ({
                              ...prev,
                              cuotas: prev.cuotas.map(c => 
                                c.id === cuota.id 
                                  ? { 
                                      ...c, 
                                      cantidad: 0,
                                      movimientos: [...(c.movimientos || []), nuevoMovimiento]
                                    }
                                  : c
                              )
                            }));
                          }}
                          style={{ padding: '6px 10px', backgroundColor: '#6b7280', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '11px' }}
                          title="Resetear a 0"
                        >
                          Reset
                        </button>
                      </div>
                      
                      {/* Desglose de precios */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '6px', marginTop: '8px', fontSize: '10px', color: '#6b7280' }}>
                        <div>Base: €{cuota.importe.toFixed(2)} × {cuota.cantidad}</div>
                        <div>IVA: €{cuota.iva.toFixed(2)} × {cuota.cantidad}</div>
                        <div style={{ fontWeight: '500', color: '#1f2937' }}>Total: €{(cuota.importe * cuota.cantidad + cuota.iva * cuota.cantidad).toFixed(2)}</div>
                      </div>
                      
                      {/* Historial de movimientos */}
                      {cuota.movimientos && cuota.movimientos.length > 0 && (
                        <div style={{ marginTop: '8px', padding: '8px', backgroundColor: '#f1f5f9', borderRadius: '4px', border: '1px solid #cbd5e1' }}>
                          <div style={{ fontSize: '10px', fontWeight: '500', color: '#475569', marginBottom: '4px' }}>📈 Historial de movimientos:</div>
                          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>
                            {cuota.movimientos.map((mov, index) => (
                              <span key={index} style={{ 
                                fontSize: '9px', 
                                padding: '2px 6px', 
                                backgroundColor: mov.cantidad > 0 ? '#dcfce7' : '#fee2e2', 
                                color: mov.cantidad > 0 ? '#166534' : '#991b1b',
                                borderRadius: '3px',
                                border: `1px solid ${mov.cantidad > 0 ? '#bbf7d0' : '#fecaca'}`
                              }}>
                                {new Date(mov.fecha).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' })}: {mov.cantidad > 0 ? '+' : ''}{mov.cantidad}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {/* Servicios Adicionales - Solo los servicios reales */}
                <div style={{ marginTop: '16px', padding: '12px', backgroundColor: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '12px', color: '#1e293b' }}>
                    🏋️ Servicios Adicionales
                  </label>
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                    <div>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '500', marginBottom: '4px', color: '#64748b' }}>
                        🥗 Nutrición
                      </label>
                      <input 
                        type="number" 
                        step="0.01" 
                        placeholder="0.00 €" 
                        value={data.nutricion || ''} 
                        onChange={(e) => handleChange('nutricion', e.target.value)} 
                        style={{ width: '100%', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', backgroundColor: 'white' }} 
                        title="Ingresos por consultas nutricionales - Actualizar cada viernes"
                      />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '500', marginBottom: '4px', color: '#64748b' }}>
                        🩺 Fisioterapia
                      </label>
                      <input 
                        type="number" 
                        step="0.01" 
                        placeholder="0.00 €" 
                        value={data.fisioterapia || ''} 
                        onChange={(e) => handleChange('fisioterapia', e.target.value)} 
                        style={{ width: '100%', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', backgroundColor: 'white' }} 
                        title="Ingresos por fisioterapia - Actualizar cada viernes"
                      />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '500', marginBottom: '4px', color: '#64748b' }}>
                        💪 Entrenamientos Personales
                      </label>
                      <input 
                        type="number" 
                        step="0.01" 
                        placeholder="0.00 €" 
                        value={data.entrenamiento_personal || ''} 
                        onChange={(e) => handleChange('entrenamiento_personal', e.target.value)} 
                        style={{ width: '100%', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', backgroundColor: 'white' }} 
                        title="Ingresos por entrenamientos personales - Actualizar cada viernes"
                      />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '500', marginBottom: '4px', color: '#64748b' }}>
                        🏃 Entrenamientos Grupales
                      </label>
                      <input 
                        type="number" 
                        step="0.01" 
                        placeholder="0.00 €" 
                        value={data.entrenamientos_grupales || ''} 
                        onChange={(e) => handleChange('entrenamientos_grupales', e.target.value)} 
                        style={{ width: '100%', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', backgroundColor: 'white' }} 
                        title="Ingresos por entrenamientos grupales - Actualizar cada viernes"
                      />
                    </div>
                    <div style={{ gridColumn: '1 / -1' }}>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '500', marginBottom: '4px', color: '#64748b' }}>
                        📋 Otros Ingresos
                      </label>
                      <input 
                        type="number" 
                        step="0.01" 
                        placeholder="0.00 €" 
                        value={data.otros || ''} 
                        onChange={(e) => handleChange('otros', e.target.value)} 
                        style={{ width: '100%', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '12px', backgroundColor: 'white' }} 
                        title="Otros ingresos no categorizados - Actualizar cada viernes"
                      />
                    </div>
                  </div>
                  
                  {/* Información adicional */}
                  <div style={{ marginTop: '8px', fontSize: '11px', color: '#64748b', fontStyle: 'italic' }}>
                    💡 Incluye todos los ingresos adicionales a las cuotas mensuales
                  </div>
                </div>
              </div>
            </div>

            {/* Gastos */}
            <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', border: '2px solid #ef4444' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '20px', color: '#ef4444', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <TrendingDown style={{ width: '20px', height: '20px' }} />
                Gastos
              </h3>
              
              <div style={{ display: 'grid', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Alquiler (€)</label>
                  <input type="number" step="0.01" value={data.alquiler} onChange={(e) => handleChange('alquiler', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Suministros (€)</label>
                  <input type="number" step="0.01" value={data.suministros} onChange={(e) => handleChange('suministros', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Nóminas (€)</label>
                  <input type="number" step="0.01" value={data.nominas} onChange={(e) => handleChange('nominas', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Seguridad Social (€)</label>
                  <input type="number" step="0.01" value={data.seguridad_social} onChange={(e) => handleChange('seguridad_social', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Marketing (€)</label>
                  <input type="number" step="0.01" value={data.marketing} onChange={(e) => handleChange('marketing', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>Mantenimiento (€)</label>
                  <input type="number" step="0.01" value={data.mantenimiento} onChange={(e) => handleChange('mantenimiento', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} />
                </div>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>🏢 Royalty a la Marca (€)</label>
                  <input type="number" step="0.01" value={data.royalty || 0} onChange={(e) => handleChange('royalty', e.target.value)} style={{ width: '100%', padding: '12px', border: '1px solid #d1d5db', borderRadius: '8px' }} placeholder="Ej: 5% de facturación" title="Royalty mensual pagado a la marca matriz" />
                </div>
                {/* Gastos Extras Dinámicos */}
                <div>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>
                    <label style={{ fontSize: '14px', fontWeight: '500' }}>💸 Gastos Extras</label>
                    <button onClick={addGastoExtra} style={{ padding: '6px 12px', backgroundColor: '#ef4444', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer', fontSize: '12px', display: 'flex', alignItems: 'center', gap: '4px' }}>
                      <Plus style={{ width: '14px', height: '14px' }} />
                      Añadir
                    </button>
                  </div>
                  
                  {data.gastos_extras.map((gasto) => (
                    <div key={gasto.id} style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr auto', gap: '6px', marginBottom: '8px', alignItems: 'end' }}>
                      <input 
                        type="text" 
                        placeholder="Concepto del gasto" 
                        value={gasto.concepto} 
                        onChange={(e) => updateGastoExtra(gasto.id, 'concepto', e.target.value)} 
                        style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '11px' }} 
                      />
                      <select 
                        value={gasto.categoria} 
                        onChange={(e) => updateGastoExtra(gasto.id, 'categoria', e.target.value)} 
                        style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '11px' }}
                      >
                        {CATEGORIAS_GASTOS.map(cat => <option key={cat} value={cat}>{cat}</option>)}
                      </select>
                      <input 
                        type="number" 
                        placeholder="€" 
                        value={gasto.importe} 
                        onChange={(e) => updateGastoExtra(gasto.id, 'importe', e.target.value)} 
                        style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', fontSize: '11px' }} 
                      />
                      <button 
                        onClick={() => removeGastoExtra(gasto.id)} 
                        style={{ padding: '6px', backgroundColor: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                      >
                        <Trash2 style={{ width: '12px', height: '12px' }} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Resumen */}
            <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '20px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <Calculator style={{ width: '20px', height: '20px' }} />
                Resumen Financiero
              </h3>
              
              <div style={{ display: 'grid', gap: '16px' }}>
                <div style={{ padding: '16px', backgroundColor: '#f0fdf4', borderRadius: '8px', border: '1px solid #bbf7d0' }}>
                  <p style={{ fontSize: '14px', color: '#166534', margin: '0 0 4px 0' }}>Ingresos Netos (sin IVA)</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#15803d', margin: 0 }}>€{totalIngresosNetos.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: '#f0f9ff', borderRadius: '8px', border: '1px solid #0ea5e9' }}>
                  <p style={{ fontSize: '14px', color: '#0c4a6e', margin: '0 0 4px 0' }}>Total IVA (21%)</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#0284c7', margin: 0 }}>€{totalIvaCuotas.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                  <p style={{ fontSize: '14px', color: '#475569', margin: '0 0 4px 0' }}>Total Ingresos (con IVA)</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#64748b', margin: 0 }}>€{totalIngresos.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: '#fef2f2', borderRadius: '8px', border: '1px solid #fecaca' }}>
                  <p style={{ fontSize: '14px', color: '#991b1b', margin: '0 0 4px 0' }}>Total Gastos</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#dc2626', margin: 0 }}>€{totalGastos.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: beneficioNeto >= 0 ? '#eff6ff' : '#fef2f2', borderRadius: '8px', border: `1px solid ${beneficioNeto >= 0 ? '#bfdbfe' : '#fecaca'}` }}>
                  <p style={{ fontSize: '14px', color: beneficioNeto >= 0 ? '#1e40af' : '#991b1b', margin: '0 0 4px 0' }}>Beneficio Neto</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: beneficioNeto >= 0 ? '#2563eb' : '#dc2626', margin: 0 }}>€{beneficioNeto.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                  <p style={{ fontSize: '14px', color: '#475569', margin: '0 0 4px 0' }}>Margen Beneficio</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#64748b', margin: 0 }}>{margen.toFixed(1)}%</p>
                </div>
                
                <div style={{ padding: '16px', backgroundColor: '#f0f9ff', borderRadius: '8px', border: '1px solid #0ea5e9' }}>
                  <p style={{ fontSize: '14px', color: '#0c4a6e', margin: '0 0 4px 0' }}>Total Clientes</p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#0284c7', margin: 0 }}>{totalClientes}</p>
                </div>
              </div>
              
              <div style={{ marginTop: '24px', display: 'flex', gap: '12px' }}>
                <button onClick={handleSave} style={{ flex: 1, padding: '12px', backgroundColor: '#059669', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
                  <Save style={{ width: '16px', height: '16px' }} />
                  Guardar & Sincronizar
                </button>
                <button 
                  onClick={() => {
                    syncWithClientsModule();
                    alert(`${totalClientes} clientes sincronizados con el módulo de clientes para ${MESES[data.mes - 1]} ${data.año}`);
                  }} 
                  style={{ padding: '12px', backgroundColor: '#0ea5e9', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: '6px' }}
                  title="Sincronizar solo los datos de clientes sin guardar"
                >
                  👥 Sync
                </button>
              </div>
            </div>
          </div>
          </>
        )}

        {activeTab === 'reportes' && (
          <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '48px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', textAlign: 'center' }}>
            <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '16px' }}>📊 Reportes Avanzados</h2>
            <p style={{ color: '#6b7280', fontSize: '16px' }}>Los reportes detallados estarán disponibles próximamente.</p>
          </div>
        )}
      </div>

      {/* Modal de Configuración de Tipos de Cuotas */}
      {showCuotaConfig && (
        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1000 }}>
          <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', maxWidth: '600px', width: '95%', maxHeight: '85vh', overflow: 'auto', boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 'bold', margin: 0 }}>⚙️ Configurar Tipos de Cuotas</h3>
              <button 
                onClick={() => setShowCuotaConfig(false)}
                style={{ padding: '6px', backgroundColor: '#f3f4f6', border: 'none', borderRadius: '6px', cursor: 'pointer' }}
              >
                ✕
              </button>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>
                Añadir nuevo tipo de cuota:
              </label>
              <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr auto', gap: '8px', marginBottom: '8px' }}>
                <input 
                  type="text"
                  value={newTipoCuota}
                  onChange={(e) => setNewTipoCuota(e.target.value)}
                  placeholder="Ej: Cuota Senior, Cuota VIP..."
                  style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px' }}
                />
                <input 
                  type="number"
                  value={newPrecioCuota || ''}
                  onChange={(e) => setNewPrecioCuota(parseFloat(e.target.value) || 0)}
                  placeholder="Precio base (sin IVA) €"
                  style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px' }}
                />
                <button 
                  onClick={addTipoCuota}
                  disabled={!newTipoCuota.trim() || newPrecioCuota <= 0}
                  style={{ 
                    padding: '8px 16px', 
                    backgroundColor: (!newTipoCuota.trim() || newPrecioCuota <= 0) ? '#9ca3af' : '#10b981', 
                    color: 'white', 
                    border: 'none', 
                    borderRadius: '6px', 
                    cursor: (!newTipoCuota.trim() || newPrecioCuota <= 0) ? 'not-allowed' : 'pointer' 
                  }}
                >
                  Añadir
                </button>
              </div>
              <div style={{ fontSize: '12px', color: '#6b7280', backgroundColor: '#f0f9ff', padding: '12px', borderRadius: '6px', border: '1px solid #0ea5e9' }}>
                <p style={{ margin: '0 0 8px 0', fontWeight: '500' }}>💡 Cálculo Automático de IVA (21%)</p>
                <p style={{ margin: '0 0 4px 0' }}>• Introduce el precio BASE (sin IVA)</p>
                <p style={{ margin: '0 0 4px 0' }}>• Ejemplo: €55 → Base: €55.00 + IVA: €11.55 = Total: €66.55</p>
                <p style={{ margin: 0 }}>• El sistema calcula automáticamente el IVA y precio total</p>
              </div>
            </div>

            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '12px' }}>
                Tipos de cuotas actuales:
              </label>
              <div style={{ display: 'grid', gap: '8px' }}>
                {tiposCuota.map((tipo) => (
                  <div key={tipo.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '8px', backgroundColor: '#f9fafb', borderRadius: '6px' }}>
                    <span style={{ fontSize: '14px' }}>{tipo.nombre} - €{tipo.precio}</span>
                    <button 
                      onClick={() => removeTipoCuota(tipo.id)}
                      style={{ padding: '4px 8px', backgroundColor: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '12px' }}
                      title="Eliminar tipo de cuota"
                    >
                      <Trash2 style={{ width: '12px', height: '12px' }} />
                    </button>
                  </div>
                ))}
              </div>
            </div>

            <div style={{ marginTop: '20px', textAlign: 'center' }}>
              <button 
                onClick={() => setShowCuotaConfig(false)}
                style={{ padding: '10px 20px', backgroundColor: '#059669', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer' }}
              >
                Guardar y Cerrar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AccountingModule;
